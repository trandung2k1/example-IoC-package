import 'reflect-metadata';
interface IContainer {
    register<T>(name: string, cls: new (...args: any[]) => T): void;
    resolve<T>(name: string): T;
    resolveController<T>(name: string): T;
    resolveRepository<T>(name: string): T;
}
declare class DIContainer implements IContainer {
    private services;
    private controllers;
    private repositories;
    register<T>(name: string, cls: new (...args: any[]) => T): void;
    resolve<T>(name: string): T;
    resolveController<T>(name: string): T;
    resolveRepository<T>(name: string): T;
    private _resolve;
}
export default DIContainer;
