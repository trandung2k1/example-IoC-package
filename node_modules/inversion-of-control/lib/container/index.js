"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const decorators_1 = require("../decorators");
class DIContainer {
    constructor() {
        this.services = new Map();
        this.controllers = new Map();
        this.repositories = new Map();
    }
    register(name, cls) {
        if ((0, decorators_1.isController)(cls)) {
            this.controllers.set(name, cls);
        }
        else if ((0, decorators_1.isRepository)(cls)) {
            this.repositories.set(name, cls);
        }
        else if ((0, decorators_1.isService)(cls)) {
            this.services.set(name, cls);
        }
        else {
            throw new Error(`Unknown class type: ${name}`);
        }
    }
    resolve(name) {
        const cls = this.services.get(name);
        if (!cls) {
            throw new Error(`Service ${name} not found`);
        }
        return this._resolve(cls);
    }
    resolveController(name) {
        const cls = this.controllers.get(name);
        if (!cls) {
            throw new Error(`Controller ${name} not found`);
        }
        return this._resolve(cls);
    }
    resolveRepository(name) {
        const cls = this.repositories.get(name);
        if (!cls) {
            throw new Error(`Repository ${name} not found`);
        }
        return this._resolve(cls);
    }
    _resolve(cls) {
        const paramTypes = Reflect.getMetadata('design:paramtypes', cls) || [];
        const params = paramTypes.map((paramType) => {
            const paramName = paramType.name;
            if (this.repositories.has(paramName)) {
                return this.resolveRepository(paramName);
            }
            else if (this.controllers.has(paramName)) {
                return this.resolveController(paramName);
            }
            else {
                return this.resolve(paramName);
            }
        });
        return new cls(...params);
    }
}
exports.default = DIContainer;
